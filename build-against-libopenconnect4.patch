diff --git a/auth-dialog/main.c b/auth-dialog/main.c
index 54e357d..f76a6a9 100644
--- a/auth-dialog/main.c
+++ b/auth-dialog/main.c
@@ -91,27 +91,25 @@ g_unix_set_fd_nonblocking (gint     fd,
 
 #include "openconnect.h"
 
-#if OPENCONNECT_API_VERSION_MAJOR == 1
-#define openconnect_vpninfo_new openconnect_vpninfo_new_with_cbdata
-#define openconnect_init_ssl openconnect_init_openssl
-#endif
-
 static GConfClient *_gcl;
 static char *_config_path;
 
-#ifndef OPENCONNECT_CHECK_VER
-#define OPENCONNECT_CHECK_VER(x,y) 0
-#endif
-
-#if !OPENCONNECT_CHECK_VER(1,5)
-#define OPENCONNECT_X509 X509
-#define OPENCONNECT_OPENSSL
-#endif
+#define FORMCHOICE(sopt, i)             ((sopt)->choices[i])
+#define IGNORE_OPT(opt)                 ((opt)->flags & OC_FORM_OPT_IGNORE)
 
-#ifdef OPENCONNECT_OPENSSL
-#include <openssl/ssl.h>
-#include <openssl/bio.h>
-#include <openssl/ui.h>
+#if OPENCONNECT_CHECK_VER(4,0)
+#define dup_option_value(opt)		g_strdup((opt)->_value);
+#define OC3DUP(x)			(x)
+#define write_config_const		const
+#else
+#define dup_option_value(opt)		g_strdup((opt)->value);
+#define openconnect_set_option_value(opt, val) do { \
+		struct oc_form_opt *_o = (opt);				\
+		free(_o->value); _o->value = g_strdup(val);		\
+	} while (0)
+#define openconnect_free_cert_info(v, x) free(x)
+#define OC3DUP(x)			g_strdup(x)
+#define write_config_const		/* */
 #endif
 
 static const GnomeKeyringPasswordSchema OPENCONNECT_SCHEMA_DEF = {
@@ -313,9 +311,6 @@ typedef struct ui_fragment_data {
 	GtkWidget *entry;
 	gpointer find_request;
 	auth_ui_data *ui_data;
-#ifdef OPENCONNECT_OPENSSL
-	UI_STRING *uis;
-#endif
 	struct oc_form_opt *opt;
 	char *entry_text;
 	int grab_focus;
@@ -326,27 +321,9 @@ static void entry_activate_cb(GtkWidget *widget, auth_ui_data *ui_data)
 	gtk_dialog_response(GTK_DIALOG(ui_data->dialog), AUTH_DIALOG_RESPONSE_LOGIN);
 }
 
-#ifdef OPENCONNECT_OPENSSL
-static void do_check_visibility(ui_fragment_data *data, gboolean *visible)
-{
-	int min_len;
-
-	if (!data->uis)
-		return;
-
-	min_len = UI_get_result_minsize(data->uis);
-
-	if (min_len && (!data->entry_text || strlen(data->entry_text) < min_len))
-		*visible = FALSE;
-}
-#endif
 static void evaluate_login_visibility(auth_ui_data *ui_data)
 {
 	gboolean visible = TRUE;
-#ifdef OPENCONNECT_OPENSSL
-	g_queue_foreach(ui_data->form_entries, (GFunc)do_check_visibility,
-			&visible);
-#endif
 	gtk_widget_set_sensitive (ui_data->login_button, visible);
 }
 
@@ -354,9 +331,6 @@ static void entry_changed(GtkEntry *entry, ui_fragment_data *data)
 {
 	g_free (data->entry_text);
 	data->entry_text = g_strdup(gtk_entry_get_text(entry));
-#ifdef OPENCONNECT_OPENSSL
-	evaluate_login_visibility(data->ui_data);
-#endif
 }
 
 static void do_override_label(ui_fragment_data *data, struct oc_choice *choice)
@@ -379,31 +353,11 @@ static void combo_changed(GtkComboBox *combo, ui_fragment_data *data)
 	if (entry < 0)
 		return;
 
-	data->entry_text = sopt->choices[entry].name;
+	data->entry_text = FORMCHOICE(sopt, entry)->name;
 
 	g_queue_foreach(data->ui_data->form_entries, (GFunc)do_override_label,
-			&sopt->choices[entry]);
-}
-
-#ifdef OPENCONNECT_OPENSSL
-static gboolean ui_write_error (ui_fragment_data *data)
-{
-	ssl_box_add_error(data->ui_data, UI_get0_output_string(data->uis));
-
-	g_slice_free (ui_fragment_data, data);
-
-	return FALSE;
-}
-
-static gboolean ui_write_info (ui_fragment_data *data)
-{
-	ssl_box_add_info(data->ui_data, UI_get0_output_string(data->uis));
-
-	g_slice_free (ui_fragment_data, data);
-
-	return FALSE;
+			FORMCHOICE(sopt, entry));
 }
-#endif
 
 static gboolean ui_write_prompt (ui_fragment_data *data)
 {
@@ -412,16 +366,8 @@ static gboolean ui_write_prompt (ui_fragment_data *data)
 	int visible;
 	const char *label;
 
-#ifdef OPENCONNECT_OPENSSL
-	if (data->uis) {
-		label = UI_get0_output_string(data->uis);
-		visible = UI_get_input_flags(data->uis) & UI_INPUT_FLAG_ECHO;
-	} else
-#endif
-	{
-		label = data->opt->label;
-		visible = (data->opt->type == OC_FORM_OPT_TEXT);
-	}
+	label = data->opt->label;
+	visible = (data->opt->type == OC_FORM_OPT_TEXT);
 
 	hbox = gtk_hbox_new(FALSE, 0);
 	gtk_box_pack_start(GTK_BOX(data->ui_data->ssl_box), hbox, FALSE, FALSE, 0);
@@ -465,17 +411,17 @@ static gboolean ui_add_select (ui_fragment_data *data)
 	combo = gtk_combo_box_new_text();
 	gtk_box_pack_end(GTK_BOX(hbox), combo, FALSE, FALSE, 0);
 	for (i = 0; i < sopt->nr_choices; i++) {
-		gtk_combo_box_append_text(GTK_COMBO_BOX(combo), sopt->choices[i].label);
+		gtk_combo_box_append_text(GTK_COMBO_BOX(combo), FORMCHOICE(sopt, i)->label);
 		if (data->entry_text &&
-		    !strcmp(data->entry_text, sopt->choices[i].name)) {
+		    !strcmp(data->entry_text, FORMCHOICE(sopt, i)->name)) {
 			gtk_combo_box_set_active(GTK_COMBO_BOX(combo), i);
 			g_free(data->entry_text);
-			data->entry_text = sopt->choices[i].name;
+			data->entry_text = FORMCHOICE(sopt, i)->name;
 		}
 	}
 	if (gtk_combo_box_get_active(GTK_COMBO_BOX(combo)) < 0) {
 		gtk_combo_box_set_active(GTK_COMBO_BOX(combo), 0);
-		data->entry_text = sopt->choices[0].name;
+		data->entry_text = FORMCHOICE(sopt, 0)->name;
 	}
 
 	if (g_queue_peek_tail(ui_data->form_entries) == data)
@@ -504,129 +450,6 @@ static gboolean ui_show (auth_ui_data *ui_data)
 	return FALSE;
 }
 
-#ifdef OPENCONNECT_OPENSSL
-/* runs in worker thread */
-static int ui_open(UI *ui)
-{
-	auth_ui_data *ui_data = _ui_data; /* FIXME global */
-
-	UI_add_user_data(ui, ui_data);
-
-	return 1;
-}
-
-/* runs in worker thread */
-static int ui_write(UI *ui, UI_STRING *uis)
-{
-	auth_ui_data *ui_data;
-	ui_fragment_data *data;
-
-	ui_data = UI_get0_user_data(ui);
-
-	/* return if a new host has been selected */
-	if (ui_data->cancelled) {
-		return 1;
-	}
-
-	data = g_slice_new0 (ui_fragment_data);
-	data->ui_data = ui_data;
-	data->uis = uis;
-
-	switch(UI_get_string_type(uis)) {
-	case UIT_ERROR:
-		g_idle_add ((GSourceFunc)ui_write_error, data);
-		break;
-
-	case UIT_INFO:
-		g_idle_add ((GSourceFunc)ui_write_info, data);
-		break;
-
-	case UIT_PROMPT:
-	case UIT_VERIFY:
-		g_mutex_lock (ui_data->form_mutex);
-		g_queue_push_head(ui_data->form_entries, data);
-		g_mutex_unlock (ui_data->form_mutex);
-
-		g_idle_add ((GSourceFunc)ui_write_prompt, data);
-		break;
-
-	case UIT_BOOLEAN:
-		/* FIXME */
-	case UIT_NONE:
-	default:
-		g_slice_free (ui_fragment_data, data);
-	}
-	return 1;
-}
-
-/* runs in worker thread */
-static int ui_flush(UI* ui)
-{
-	auth_ui_data *ui_data;
-	int response;
-
-	ui_data = UI_get0_user_data(ui);
-
-	g_idle_add((GSourceFunc)ui_show, ui_data);
-	g_mutex_lock(ui_data->form_mutex);
-	/* wait for ui to show */
-	while (!ui_data->form_shown) {
-		g_cond_wait(ui_data->form_shown_changed, ui_data->form_mutex);
-	}
-	ui_data->form_shown = FALSE;
-
-	if (!ui_data->cancelled) {
-		/* wait for form submission or cancel */
-		while (!ui_data->form_retval) {
-			g_cond_wait(ui_data->form_retval_changed, ui_data->form_mutex);
-		}
-		response = GPOINTER_TO_INT (ui_data->form_retval);
-		ui_data->form_retval = NULL;
-	} else
-		response = AUTH_DIALOG_RESPONSE_CANCEL;
-
-	/* set entry results and free temporary data structures */
-	while (!g_queue_is_empty (ui_data->form_entries)) {
-		ui_fragment_data *data;
-		data = g_queue_pop_tail (ui_data->form_entries);
-
-		if (data->find_request)
-			gnome_keyring_cancel_request(data->find_request);
-
-		if (data->entry_text) {
-			UI_set_result(ui, data->uis, data->entry_text);
-		}
-		g_slice_free (ui_fragment_data, data);
-	}
-	ui_data->form_grabbed = 0;
-	g_mutex_unlock(ui_data->form_mutex);
-
-	/* -1 = cancel,
-	 *  0 = failure,
-	 *  1 = success */
-	return (response == AUTH_DIALOG_RESPONSE_LOGIN ? 1 : -1);
-}
-
-/* runs in worker thread */
-static int ui_close(UI *ui)
-{
-	return 1;
-}
-
-static int init_openssl_ui(void)
-{
-	UI_METHOD *ui_method = UI_create_method("OpenConnect VPN UI (gtk)");
-
-	UI_method_set_opener(ui_method, ui_open);
-	UI_method_set_flusher(ui_method, ui_flush);
-	UI_method_set_writer(ui_method, ui_write);
-	UI_method_set_closer(ui_method, ui_close);
-
-	UI_set_default_method(ui_method);
-	return 0;
-}
-#endif /* OPENCONNECT_OPENSSL */
-
 static void remember_gconf_key(auth_ui_data *ui_data, char *key, char *value)
 {
 	struct gconf_key *k = g_malloc(sizeof(*k));
@@ -715,7 +538,8 @@ static gboolean ui_form (struct oc_auth_form *form)
 	for (opt = form->opts; opt; opt = opt->next) {
 		ui_fragment_data *data;
 
-		if (opt->type == OC_FORM_OPT_HIDDEN)
+		if (opt->type == OC_FORM_OPT_HIDDEN ||
+		    IGNORE_OPT(opt))
 			continue;
 
 		data = g_slice_new0 (ui_fragment_data);
@@ -727,9 +551,9 @@ static gboolean ui_form (struct oc_auth_form *form)
 			g_mutex_lock (ui_data->form_mutex);
 			g_queue_push_head(ui_data->form_entries, data);
 			g_mutex_unlock (ui_data->form_mutex);
-			if (opt->type != OC_FORM_OPT_PASSWORD)
+			if (opt->type != OC_FORM_OPT_PASSWORD) {
 				data->entry_text = find_form_answer(form, opt);
-			else {
+			} else {
 				data->find_request = gnome_keyring_find_password(
 					OPENCONNECT_SCHEMA,
 					got_keyring_pw,
@@ -787,7 +611,7 @@ static int nm_process_auth_form (void *cbdata, struct oc_auth_form *form)
 			ui_fragment_data *data;
 			data = g_queue_pop_tail (ui_data->form_entries);
 			if (data->entry_text) {
-				data->opt->value = data->entry_text;
+				openconnect_set_option_value(data->opt, data->entry_text);
 
 				if (data->opt->type == OC_FORM_OPT_TEXT ||
 				    data->opt->type == OC_FORM_OPT_SELECT) {
@@ -834,7 +658,7 @@ static char* get_title(const char *vpn_name)
 
 typedef struct cert_data {
 	auth_ui_data *ui_data;
-	OPENCONNECT_X509 *peer_cert;
+	unsigned char *peer_cert;
 	const char *reason;
 } cert_data;
 
@@ -867,7 +691,7 @@ static gboolean user_validate_cert(cert_data *data)
 	GtkTextBuffer *buffer;
 	int result;
 
-	details = openconnect_get_cert_details(ui_data->vpninfo, data->peer_cert);
+	details = openconnect_get_peer_cert_details(ui_data->vpninfo);
 
 	title = get_title(data->ui_data->vpn_name);
 	dlg = gtk_message_dialog_new(NULL, 0, GTK_MESSAGE_QUESTION,
@@ -892,7 +716,7 @@ static gboolean user_validate_cert(cert_data *data)
 	text = gtk_text_view_new();
 	buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(text));
 	gtk_text_buffer_set_text(buffer, details, -1);
-	free(details);
+	openconnect_free_cert_info(data->ui_data->vpninfo, details);
 	gtk_text_view_set_editable(GTK_TEXT_VIEW(text), 0);
 	gtk_text_view_set_cursor_visible(GTK_TEXT_VIEW(text), FALSE);
 	gtk_container_add(GTK_CONTAINER(scroll), text);
@@ -915,20 +739,20 @@ static gboolean user_validate_cert(cert_data *data)
 
 /* runs in worker thread */
 static int validate_peer_cert(void *cbdata,
-			      OPENCONNECT_X509 *peer_cert, const char *reason)
+			      const char *reason)
 {
 	char *config_path = _config_path; /* FIXME global */
 	GConfClient *gcl = _gcl; /* FIXME global */
 	auth_ui_data *ui_data = cbdata;
-	char fingerprint[41];
+	const char *fingerprint;
 	char *certs_data;
 	char *key;
 	int ret = 0;
 	cert_data *data;
 
-	ret = openconnect_get_cert_sha1(ui_data->vpninfo, peer_cert, fingerprint);
-	if (ret)
-		return ret;
+	fingerprint = openconnect_get_peer_cert_hash(ui_data->vpninfo);
+	if (fingerprint == NULL)
+		return -1;
 
 	key = g_strdup_printf("%s/vpn/%s", config_path, "certsigs");
 	certs_data = gconf_client_get_string(gcl, key, NULL);
@@ -948,7 +772,7 @@ static int validate_peer_cert(void *cbdata,
 
 	data = g_slice_new(cert_data);
 	data->ui_data = ui_data; /* FIXME uses global */
-	data->peer_cert = peer_cert;
+	openconnect_get_peer_cert_DER(ui_data->vpninfo, &data->peer_cert);
 	data->reason = reason;
 
 	g_mutex_lock(ui_data->form_mutex);
@@ -1199,7 +1023,7 @@ if (0) {
 	}
 
 	openconnect_set_cafile(vpninfo,
-			       get_gconf_setting(gcl, config_path, NM_OPENCONNECT_KEY_CACERT));
+			       OC3DUP(get_gconf_setting(gcl, config_path, NM_OPENCONNECT_KEY_CACERT)));
 
 	csd = get_gconf_setting(gcl, config_path, "enable_csd_trojan");
 	if (csd && !strcmp(csd, "yes")) {
@@ -1209,17 +1033,17 @@ if (0) {
 			g_free(csd_wrapper);
 			csd_wrapper = NULL;
 		}
-		openconnect_setup_csd(vpninfo, getuid(), 1, csd_wrapper);
+		openconnect_setup_csd(vpninfo, getuid(), 1, OC3DUP(csd_wrapper));
 	}
 	g_free(csd);
 
 	proxy = get_gconf_setting(gcl, config_path, "proxy");
-	if (proxy && proxy[0] && openconnect_set_http_proxy(vpninfo, proxy))
+	if (proxy && proxy[0] && openconnect_set_http_proxy(vpninfo, OC3DUP(proxy)))
 		return -EINVAL;
 
 	cert = get_gconf_setting(gcl, config_path, NM_OPENCONNECT_KEY_USERCERT);
 	sslkey = get_gconf_setting(gcl, config_path, NM_OPENCONNECT_KEY_PRIVKEY);
-	openconnect_set_client_cert (vpninfo, cert, sslkey);
+	openconnect_set_client_cert (vpninfo, OC3DUP(cert), OC3DUP(sslkey));
 
 	pem_passphrase_fsid = get_gconf_setting(gcl, config_path, "pem_passphrase_fsid");
 	if (pem_passphrase_fsid && cert && !strcmp(pem_passphrase_fsid, "yes"))
@@ -1246,7 +1070,7 @@ static void populate_vpnhost_combo(auth_ui_data *ui_data)
 	}
 }
 
-static int write_new_config(void *cbdata, char *buf, int buflen)
+static int write_new_config(void *cbdata, write_config_const char *buf, int buflen)
 {
 	char *config_path = _config_path; /* FIXME global */
 	GConfClient *gcl = _gcl; /* FIXME global */
@@ -1367,11 +1191,10 @@ static void write_progress(void *cbdata, int level, const char *fmt, ...)
 
 static void print_peer_cert(struct openconnect_info *vpninfo)
 {
-	char fingerprint[41];
-	OPENCONNECT_X509 *cert = openconnect_get_peer_cert(vpninfo);
+	const char *fingerprint;
 
-	if (cert && !openconnect_get_cert_sha1(vpninfo, cert, fingerprint))
-		printf("gwcert\n%s\n", fingerprint);
+	fingerprint = openconnect_get_peer_cert_hash(vpninfo);
+	printf("gwcert\n%s\n", fingerprint);
 }
 
 static gboolean cookie_obtained(auth_ui_data *ui_data)
@@ -1509,11 +1332,11 @@ static void connect_host(auth_ui_data *ui_data)
 	if (openconnect_parse_url(ui_data->vpninfo, host->hostaddress)) {
 		fprintf(stderr, "Failed to parse server URL '%s'\n",
 			host->hostaddress);
-		openconnect_set_hostname (ui_data->vpninfo, g_strdup(host->hostaddress));
+		openconnect_set_hostname (ui_data->vpninfo, OC3DUP (host->hostaddress));
 	}
 
 	if (!openconnect_get_urlpath(ui_data->vpninfo) && host->usergroup)
-		openconnect_set_urlpath(ui_data->vpninfo, g_strdup(host->usergroup));
+		openconnect_set_urlpath(ui_data->vpninfo, OC3DUP (host->usergroup));
 
 	remember_gconf_key(ui_data, g_strdup("lasthost"), g_strdup(host->hostname));
 
@@ -1815,9 +1638,6 @@ int main (int argc, char **argv)
 	}
 	build_main_dialog(_ui_data);
 
-#ifdef OPENCONNECT_OPENSSL
-	init_openssl_ui();
-#endif
 	openconnect_init_ssl();
 
 	if (get_gconf_autoconnect(_gcl, _config_path))
